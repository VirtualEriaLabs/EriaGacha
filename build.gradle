import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer
plugins {
    id 'fabric-loom' version '0.9.+'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java'

}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

tasks.remapJar.dependsOn(shadowJar)
(tasks.remapJar.input as FileSystemLocationProperty<? extends FileSystemLocation>).set(shadowJar.archivePath)

repositories {
    mavenCentral()
    maven {
        url "https://gitlab.com/api/v4/projects/25316865/packages/maven"
        name "GitLab"
        credentials(HttpHeaderCredentials) {
            name = 'Private-Token'
            value = project.git_lab_private_token
        }
        authentication {
            header(HttpHeaderAuthentication)
        }
    }
}

configurations {
    shadow
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

shadowJar {
    configurations = [project.configurations.compileClasspath]
    exclude 'spring-boot-starter-logging'
    zip64 = true
    mergeServiceFiles()
    append("META-INF/spring.handlers")
    append("META-INF/spring.schemas")
    append("META-INF/spring.tooling")
    transform(PropertiesFileTransformer) {
        paths = [
                'META-INF/spring.factories'
        ]
        mergeStrategy = 'append'
    }
}


dependencies {
    implementation 'io.netty:netty-handler:4.1.65.Final'
    shadow 'io.netty:netty-handler:4.1.65.Final'

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    implementation 'com.google.guava:guava:30.1.1-jre'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    implementation 'dev.miku:r2dbc-mysql:0.8.2.RELEASE'
    shadow 'dev.miku:r2dbc-mysql:0.8.2.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc:2.5.3'
    shadow 'org.springframework.boot:spring-boot-starter-data-r2dbc:2.5.3'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    shadow 'org.springframework.boot:spring-boot-starter-test'

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    /*
    from() {
        def filterList = [
                "spring-boot-starter-data-r2dbc-2.5.3.jar",
                "spring-data-r2dbc-1.3.3.jar",
                "spring-data-relational-2.2.3.jar",
                "spring-data-commons-2.5.3.jar",
                "spring-r2dbc-5.3.9.jar",
                "spring-boot-starter-2.5.3.jar",
                "spring-boot-autoconfigure-2.5.3.jar",
                "spring-boot-2.5.3.jar",
                "spring-tx-5.3.9.jar",
                "spring-context-5.3.9.jar",
                "spring-aop-5.3.9.jar",
                "spring-beans-5.3.9.jar",
                "spring-expression-5.3.9.jar",
                "spring-core-5.3.9.jar",
                "spring-jcl-5.3.9.jar"]
        FileTree m = null
        var x = configurations
                .runtimeClasspath
                .filter {
                    filterList.find { element -> element.equalsIgnoreCase(it.name) } == it.name
                }
                .collect {
                    zipTree(it)
                }

    }
     */
    enabled = false
}

bootJar {
    mainClass.set('net.eriagacha.EriaGachaMain')
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }
    repositories {
        maven {
            url "https://gitlab.com/api/v4/projects/25316865/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "PRIVATE-TOKEN"
                value = project.git_lab_private_token
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }

    }
}
